<?php

/*
* Livefyre Drupal Plugin
*/

/*
 * Define the zor library Livefyre will pull down from.
 */
define( 'LF_ZOR', 'http://zor.livefyre.com/wjs/v3.0/javascripts/livefyre.js' );

/*
 * Include the Livefyre API
 */
include_once 'livefyre-api/libs/php/Livefyre.php';

/**
 * Implements hook_help().
 * @param string $path
 *   Which path of the site we're displaying help.
 * @param string $arg 
 *   Array that holds the current path as would be returned from arg() function.
 * @return
 *   Help text for the path.
 */
function livefyre_help($path, $arg) {
  switch ($path) {
    case "admin/help#livefyre":
      return '<p>' . t("Implements Livefyre Comments 3") . '</p>';
      break;
  }
}

/**
 * Implements hook_menu().
 * @return
 *   Items to be displayed. Stored in another file 'livefyre.admin.inc'
 */
function livefyre_menu() {

  // Add globals here

  $items = array();

  $items['admin/config/content/livefyre'] = array(
    'title' => 'Livefyre Comments 3',
    'description' => 'Livefyre Comments 3 Plugin for Drupal',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('livefyre_admin'),
    'access arguments' => array('administer livefyre settings'),
    'file' => 'livefyre.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function livefyre_permission() {
  return array(
    'administer livefyre settings' => array(
      'title' => t('Administer Livefyre module'),
      'description' => t('Perform administration tasks for the Livefyre module.'),
    ),
  );
}

/**
 * Implements hook_block_info().
 * @return
 *   The block with Livefyre's settings added.
 */
function livefyre_block_info() {
    
  $blocks['livefyre'] = array(
    'info' => t('Livefyre'), //The name that will appear in the block list.
    'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 * @param string $delta
 *   The delta letting us know we're in Livefyre Land.
 * @return
 *   Items to be displayed. Stored in another file 'livefyre.admin.inc'
 */
function livefyre_block_configure($delta = '') {

  $form = array();
  
  if ($delta == 'livefyre') {
    $form['livefyre_block_article_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Livefyre Block Article ID'),
      '#default_value' => variable_get('livefyre_block_article_id', 'block'),
      '#description' => t("The Livefyre Article ID used by the block implementation of Livefyre."),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 * @param string $delta
 *   The delta letting us know we're in Livefyre Land.
 * @param array $edit
 *   Value to set the block ID to.
 */
function livefyre_block_save($delta = '', $edit = array()) {
    
  if ($delta == 'livefyre') {
      variable_set('livefyre_block_article_id', $edit['livefyre_block_article_id']);
  }
}

/**
 * Implements hook_block_view().
 * @param string $delta
 *   The delta letting us know we're in Livefyre Land.
 * @return
 *   The block information with Livefyre's conversation data added to it.
 */
function livefyre_block_view($delta = '') {

  if ($delta == 'livefyre') {

    $block = array();

    $conv = livefyre_build_conv(variable_get('livefyre_block_article_id', 'block'), "Drupal Block");
    $lf_config = '';

    /* The Enterprise Hook is used to build the plugin to either include
     * enterprise level functionality. Without this comment, things will not
     * build nicely and sed will most likely break.
     */
    // Enterprise Hook 


    // Add the livefyre div to the block
    $livefyre_div = "<div id='livefyre-block'></div>";
    $block['content'] = $livefyre_div;

    // Grab the JS from the Conv API and cleanse it of it's tags due to Drupal function already
    // adding them.
    $output = $conv->to_initjs_v3('livefyre-block', $config = $lf_config);
    $cleansed_tags = str_replace('<script type="text/javascript">', "", $output);
    $cleansed_tags = str_replace('</script>', "", $cleansed_tags);

    livefyre_add_footer( $cleansed_tags );

    $global_push = 'if (typeof LivefyreDrupal == \'undefined\') {var LivefyreDrupal = new Array();}
      LivefyreDrupal.push(' . json_encode($lf_config) . ');';

    livefyre_page_setup( $global_push );

    return $block;
  }
}

/**
 * Implements hook_block_view().
 * @param Node $node
 *   The node being displayed.
 * @param string $view_mode
 *   The view mode of the node that is visable.
 * @return
 *   The block information with Livefyre's conversation data added to it.
 */
function livefyre_node_view($node, $view_mode = 'full') {

  $article_id = $node->nid;
  $livefyre_nodes = variable_get('livefyre_node_types');
  /* 
  * Decide what to output based on the current view.
  * Full: Display the widget
  * Teaser: Display the comment count
  */
  if ($view_mode == 'full'
    && in_array($node->type, $livefyre_nodes)
    && $livefyre_nodes[$node->type] != '0') {

    $conv = livefyre_build_conv($article_id, $node->title);
    $lf_config = '';

    /* The Enterprise Hook is used to build the plugin to either include
     * enterprise level functionality. Without this comment, things will not
     * build nicely and sed will most likely break.
     */
    // Enterprise Hook

    // Add the livefyre div to the page
    $bs_body = livefyre_bootstrap_HTML($article_id);
    $livefyre_out = "<div id='livefyre'>" . $bs_body . "</div>";
    $node->content['livefyre'] = 
      array(
          '#markup' => $livefyre_out,
          'weight' => -90,
      );

    // Grab the JS from the Conv API and cleanse it of it's tags due to Drupal function already
    // adding them.
    $output = $conv->to_initjs_v3('livefyre', $config = $lf_config);
    $cleansed_tags = str_replace('<script type="text/javascript">', "", $output);
    $cleansed_tags = str_replace('</script>', "", $cleansed_tags);

    livefyre_add_footer( $cleansed_tags );

    $global_push = 'if (typeof LivefyreDrupal == \'undefined\') {var LivefyreDrupal = new Array();}
      LivefyreDrupal.push(lf_config);';

    livefyre_page_setup( $global_push );

  }

}

/**
 * Helper: Builds a Conversation object to get JS embed string.
 * @param string $article_id
 *   Unique article ID for the conversation being created.
 * @return
 *   The block information with Livefyre's conversation data added to it.
 */
function livefyre_build_conv( $article_id, $title ) {

  // Define Livefyre variables
  global $base_url;
  $lf_site_id = variable_get('livefyre_site_id');
  $lf_site_key = variable_get('livefyre_site_key');
  $lf_source_url = $base_url . '/' . current_path();
  $lf_network = variable_get('livefyre_network', 'livefyre.com');
  $lf_network_key = variable_get('livefyre_network_key', NULL);

  // Define Livefyre API variables
  $domain = new Livefyre_Domain($lf_network, $key = $lf_network_key);
  $site = $domain->site($lf_site_id, $key = $lf_site_key);
  $article = $site->article($article_id, $lf_source_url, $title);
  $conv = $article->conversation();

    return $conv;
}

/**
 * Helper: Adds teh JS embed to the page.
 * @param string $src
 *   The delta letting us know we're in Livefyre Land.
 */
function livefyre_add_footer( $src ) {

  drupal_add_js('' . $src,
      array(
          'type' => 'inline',
          'scope' => 'footer',
          'weight' => -90,
      )
  );

}

/**
 * Helper: Spits out the setup every page with Livefyre needs.
 * @param string $global_push
 *   What global we're going to push the Livefyre Conversation Configurations to.
 */
function livefyre_page_setup( $global_push ) {

  // Build the Livefyre zor URL
  $livefyre_zor = LF_ZOR;
  $lf_network = variable_get('livefyre_network', 'livefyre.com');
  if(variable_get('livefyre_environment') != 1) {
    $livefyre_zor = "http://zor.t402.livefyre.com/wjs/v3.0/javascripts/livefyre.js";
  }

  // Add a LivefyreDrupal Global
  drupal_add_js('' . $global_push,
      array(
          'type' => 'inline',
          'scope' => 'footer',
          'weight' => -90,
      )
  );

  // Add the external javascript to the page
  drupal_add_js($livefyre_zor,
      array(
          'type' => 'external',
          'scope' => 'header',
      )
  );
}

/**
 * Helper: Grabs bootstrap HTML from Livefyre s3 servers.
 * @param string $article_id
 *   Article Identifier of the HTML we want.
 * @return 
 *   HTML representation of the collection.
 */
function livefyre_bootstrap_HTML( $article_id ) {

  $lf_network = variable_get('livefyre_network');
  $lf_site_id = variable_get('livefyre_site_id');
  $article_id_b64 = base64_encode($article_id);
  $env = '';
  if(variable_get('livefyre_environment') != 1) {
    $env = '/t402.livefyre.com';
  }

  $url = 'http://bootstrap.' . $lf_network 
    . '/bs3' . $env
    . '/' . $lf_network
    . '/' . $lf_site_id
    . '/' . $article_id_b64
    . '/bootstrap.html';

  $request = drupal_http_request($url);
  if($request->code == 500) {
    return '';
  }

  return '' . $request->data;
  
}
